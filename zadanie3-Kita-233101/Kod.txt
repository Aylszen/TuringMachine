import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Scanner;
import java.util.Set;

public class Data {

	static Map<String, State> listAllStatesMap = new HashMap<String, State>();
	static String startingState = new String();
	static ArrayList<State> acceptingStates = new ArrayList<State>();
	static ArrayList<String> availableSymbols = new ArrayList<String>();
	static String tape = new String();
	static String orderStart = new String();
	static boolean isBegin = true;
	static State currentState;
	static int iterator;
	static int tapeLength;
	static boolean startColoring = false;
	static String statePath;
	public void setInitialValues() {
		// Setting up states
		createStates(5);
		// Setting starting state
		startingState = "q0";
		orderStart = "R";

		// Setting available symbols
		String[] availableSymbols = { "0", "1" };
		setAvailableSymbols(availableSymbols);

		// Setting accepting states
		addAcceptingStates(listAllStatesMap.get("q3"));

		setTransitions("q0", "0;1,q1,L 1;0,q2,L ~;1,q1,L");
		setTransitions("q1", "0;1,q3,L 1;0,q4,L ~;1,q3,-");
		setTransitions("q2", "0;0,q4,L 1;1,q4,L ~;0,q4,L");
		setTransitions("q3", "0;0,q3,L 1;1,q3,L ~;-,q3,-");
		setTransitions("q4", "0;1,q3,L 1;0,q4,L ~;1,q3,-");
		
		currentState = listAllStatesMap.get(startingState);
		iterator = 0;
		statePath = new String();
	}

	public void createStates(int numberOfStates) {
		for (int i = 0; i < numberOfStates; i++) {
			String stateName = "q" + i;
			listAllStatesMap.put(stateName, new State(stateName, i));
		}
	}

	public void setAvailableSymbols(String[] symbols) {
		for (String symbol : symbols) {
			availableSymbols.add(symbol);
		}
	}

	public void setTransitions(String stateName, String allTransitions) {
		listAllStatesMap.get(stateName).setTransitions(allTransitions);
	}

	public void addAcceptingStates(State acceptingState) {
		acceptingStates.add(acceptingState);
	}

	public static void printInputData(String[] inputDataStringTable) {
		System.out.println("Input data:");
		for (String inputDataStringElem : inputDataStringTable) {
			System.out.println(inputDataStringElem);
		}
		System.out.println("#####");

	}

	public static String reverseString(String input) {
		byte[] strAsByteArray = input.getBytes();

		byte[] result = new byte[strAsByteArray.length];

		// Store result in reverse order into the
		// result byte[]
		for (int i = 0; i < strAsByteArray.length; i++)
			result[i] = strAsByteArray[strAsByteArray.length - i - 1];

		return new String(result);
	}
	
	public static void updateStatePath()
	{
		if (!Data.acceptingStates.contains(Data.currentState))
		{
			Data.statePath += "(" + Data.currentState.toString() + ")";
		}
		else
		{
			Data.statePath += "((" + Data.currentState.toString() + "))";
		}
		if (Data.iterator >= 0 && Data.iterator < Data.tapeLength)
		{
			Data.statePath += "-->";
		}
	}
}

import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.FlowLayout;
import java.awt.GridLayout;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Vector;

import javax.swing.BoxLayout;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.border.EmptyBorder;
import javax.swing.table.DefaultTableModel;

public class GUI {
	static JTextField dataTextField;
	static JFrame jFrame;
	static JButton submitButton;
	static JButton oneStepButton;
	static JButton automaticButton;
	static JLabel enteredDataLabel;
	static JLabel dataLabel;
	static JLabel currentStateLabel;
	static JLabel statePathLabel;
	static JTable dataTable;
	static JPanel firstPanel;
	static JPanel secondPanel;
	static JPanel thirdPanel;
	static JScrollPane sp;
	static JPanel fourthPanel;
	static JPanel fifthPanel;
	static DefaultTableModel dm;
	static int place;
	static boolean isRunning = false;

	public GUI() {
		Data data = new Data();
		data.setInitialValues();
		jFrame = new JFrame("Turing Machine");
		enteredDataLabel = new JLabel("No Data entered");
		dataLabel = new JLabel("Number:");
		currentStateLabel = new JLabel();
		dataTextField = new JTextField();
		submitButton = new JButton("Submit");
		oneStepButton = new JButton("One step");
		automaticButton = new JButton("Automatic");
		firstPanel = new JPanel();
		secondPanel = new JPanel();
		thirdPanel = new JPanel();
		fourthPanel = new JPanel();
		fifthPanel = new JPanel();
		dm = new DefaultTableModel(0, 0);
		dataTable = new JTable();
		statePathLabel = new JLabel();
		dataTable.setDefaultRenderer(Object.class, new MyTableCellRender());

		firstPanel.setLayout(new BoxLayout(firstPanel, BoxLayout.PAGE_AXIS));
		firstPanel.add(dataTextField, BorderLayout.NORTH);

		secondPanel.setLayout(new GridLayout(1, 3));
		secondPanel.add(submitButton);
		secondPanel.add(dataLabel);
		dataLabel.setHorizontalAlignment(JLabel.CENTER);
		secondPanel.add(enteredDataLabel);

		thirdPanel.setLayout(new GridLayout(1, 3));
		thirdPanel.add(currentStateLabel);
		thirdPanel.add(oneStepButton);
		thirdPanel.add(automaticButton);

		submitButton.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				enteredDataLabel.setText(dataTextField.getText());
				String tempTapeString = dataTextField.getText();
				if (Data.orderStart.contentEquals("R") == true) {
					if (tempTapeString.length() == 1 && tempTapeString.contains("1")) {
						Data.tape = "~~" + tempTapeString;
						Data.tapeLength = Data.tape.length();
					} else {
						Data.tape = "~" + tempTapeString;
						Data.tapeLength = Data.tape.length();
					}
				} else if (Data.orderStart.contentEquals("L") == true) {
					//
				}
				fillUpTable(Data.tape);
				Data.currentState = Data.listAllStatesMap.get(Data.startingState);
				if (Data.orderStart.contentEquals("R") == true) {
					Data.iterator = Data.tapeLength - 1;
				} else if (Data.orderStart.contentEquals("L") == true) {
					Data.iterator = 0;
				}
				currentStateLabel.setText(Data.currentState.toString());
				Data.statePath = "(" + Data.currentState.toString() + ")-->";
				Data.startColoring = true;
				statePathLabel.setText("");
				isRunning = false;
			}
		});

		automaticButton.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				isRunning = true;
				Thread thread = new Thread(new Runnable() {
					public void run() {
						int sleepTime = 4000;
						try {
							Thread.sleep(sleepTime);
						} catch (InterruptedException e1) {
							// TODO Auto-generated catch block
							e1.printStackTrace();
						}
						while (isRunning) {
							if (Data.iterator >= 0 && Data.iterator < Data.tapeLength) {
								TuringMachine.start2(enteredDataLabel.getText(), dataTable, currentStateLabel, data);
								refreshColors();
								if (!(Data.iterator >= 0 && Data.iterator < Data.tapeLength)) {
									statePathLabel.setText(Data.statePath);
									statePathLabel.revalidate();
									fifthPanel.revalidate();
								}
								try {
									Thread.sleep(sleepTime);
								} catch (InterruptedException e) {
									// TODO Auto-generated catch block
									e.printStackTrace();
								}
							} else {
								isRunning = false;
							}
						}
					}
				});
				thread.start();
			}
		});

		oneStepButton.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e) {
				if (Data.iterator >= 0 && Data.iterator < Data.tapeLength) {
					TuringMachine.start2(enteredDataLabel.getText(), dataTable, currentStateLabel, data);
					refreshColors();
					if (!(Data.iterator >= 0 && Data.iterator < Data.tapeLength)) {
						statePathLabel.setText(Data.statePath);
						statePathLabel.revalidate();
						fifthPanel.revalidate();
					}
				}

			}
		});

		fourthPanel.setLayout(new BoxLayout(fourthPanel, BoxLayout.PAGE_AXIS));

		dataTable.setTableHeader(null);
		String header[] = new String[] { " ", " " };
		dm.setColumnIdentifiers(header);
		dataTable.setModel(dm);
		fillUpTable("no data");
		sp = new JScrollPane(dataTable);
		fourthPanel.add(sp);

		fifthPanel.setLayout(new GridLayout(1, 1));
		fifthPanel.add(statePathLabel);
		statePathLabel.setHorizontalAlignment(JLabel.CENTER);

		jFrame.setLayout(new BoxLayout(jFrame.getContentPane(), BoxLayout.PAGE_AXIS));
		// add panel to frame
		jFrame.add(firstPanel);
		jFrame.add(secondPanel);
		jFrame.add(thirdPanel);
		jFrame.add(fourthPanel);
		jFrame.add(fifthPanel);
		// set the size of frame
		jFrame.setSize(400, 300);

		jFrame.show();
	}

	public void fillUpTable(String data) {
		String[] dataArr = data.split("");
		dm.setColumnIdentifiers(dataArr);
		if (dm.getRowCount() > 0) {
			dm.removeRow(0);
		}
		Vector<Object> rowData = new Vector<Object>();
		for (int i = 0; i < data.length(); i++) {
			rowData.add(data.charAt(i));
		}
		dm.addRow(rowData);
		dm.fireTableDataChanged();
		dataTable.revalidate();
		dataTable.repaint();

		thirdPanel.revalidate();
	}

	public void refreshColors() {
		// To refresh colors...
		for (int i = 0; i < Data.tapeLength; i++) {
			String dataFromTable = String.valueOf(dataTable.getValueAt(0, i));
			dataTable.setValueAt(dataFromTable, 0, i);
		}
		//
	}

}

import javax.swing.*;
import javax.swing.table.*;
import java.awt.*;

class MyTableCellRender extends DefaultTableCellRenderer {

	public MyTableCellRender() {
		setOpaque(true);
	}

	public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus,
			int row, int column) {
		if (Data.startColoring) {
			if (column == Data.iterator + 1) {
				setBackground(Color.yellow);
			} else {
				setBackground(Color.white);
			}
		}

		setText(value != null ? value.toString() : "");
		return this;
	}
}

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

public class State {
	Transition transitions;
	private String name;
	private Map<String, String> valuesMap = new HashMap<String, String>();
	private Map<String, Transition> transitionsMap = new HashMap<String, Transition>();
	private Map<String, String> movementDirectionMap = new HashMap<String, String>();
	public State() {

	}

	public State(String name, int value) {
		this.name = name;
		}

	public void setTransitions(String inputString) {

		if (inputString.length() != 0) {
			String[] stringAfterSpaceSplit = inputString.split(" ");
			for (String stringElem : stringAfterSpaceSplit) {
				String[] stringAfterSemicolonSplit = stringElem.split(";");
				String[] stringAfterCommaSplit = stringAfterSemicolonSplit[1].split(",");
				valuesMap.put(stringAfterSemicolonSplit[0], stringAfterCommaSplit[0]);
				transitionsMap.put(stringAfterSemicolonSplit[0], new Transition(Data.listAllStatesMap.get(stringAfterCommaSplit[1])));
				movementDirectionMap.put(stringAfterSemicolonSplit[0], stringAfterCommaSplit[2]);
			}
		}
	}

	public State goToNextState(String string) {
		return transitionsMap.get(string).getNextState();
	}
	
	public char getValue(String string)
	{
		char value = valuesMap.get(string).toCharArray()[0];
		if (value == "-".toCharArray()[0])
		{
			char emptyValue = 0;
			return emptyValue;
		}
		return valuesMap.get(string).toCharArray()[0];
	}

	public String getMovementDirection(String string)
	{
		return movementDirectionMap.get(string);
	}
	
	@Override
	public String toString() {
		return name;
	}
}

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

public class Transition {
	private State nextState;

	public Transition(State nextState) {
		this.nextState = nextState;
	}

	public State getNextState() {
		return nextState;
	}
}


import java.util.Scanner;

import javax.swing.JLabel;
import javax.swing.JTable;
import javax.swing.table.TableCellRenderer;

public class TuringMachine {

	public static void main(String[] args) {
		new GUI();
	}

	public static void start2(String dataTape, JTable jtable, JLabel currentStateLabel, Data data) {
		if (data.orderStart.contentEquals("R") == true) {
				String dataFromTable = String.valueOf(jtable.getValueAt(0, data.iterator));
				String movementDirection = data.currentState.getMovementDirection(dataFromTable);
				char newValue = data.currentState.getValue(dataFromTable);
				State tempNewState = data.currentState.goToNextState(dataFromTable);
				data.currentState = tempNewState;
				currentStateLabel.setText(data.currentState.toString());
				jtable.setValueAt(newValue, 0, data.iterator);
				if (movementDirection.contains("L")) {
					data.iterator--;
				} else if (movementDirection.contains("R")) {
					data.iterator++;
				} else {
					data.iterator--;
				}
				data.updateStatePath();
			}
		}
}
